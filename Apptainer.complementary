# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:xenial
Stage: build

%files
    .

%post
    ## The "%post"-part of this script is called after the container has
    ## been created with the "%setup"-part above and runs "inside the
    ## container". Most importantly, it is used to install dependencies
    ## and build the planner. Add all commands that have to be executed
    ## once before the planner runs in this part of the script.

    ## Install all necessary dependencies.
    apt-get update
    apt-get -y install cmake make python autotools-dev automake g++-5 gcc-5 g++-multilib

    ## Build your planner
    ./build.py release64 -j6
    # strip --strip-all builds/release64/bin/downward


# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:xenial
Stage: run

# Copy planner binary and required files from Stage 1.
%files from build
    fast-downward.py
    builds/
    driver

%post
    ## Install only dependencies for running the planner.
    apt-get update
    apt-get -y install python-minimal
    ## Remove unnecessary files to keep the image small.
    rm -rf /var/lib/apt/lists/*

%runscript
    ## The runscript is called whenever the container is used to solve
    ## an instance.

    DOMAINFILE=$1
    PROBLEMFILE=$2
    PLANFILE=$3

    ## Call your planner.
    ./fast-downward.py \
        --build=release64 \
        --plan-file $PLANFILE \
        $DOMAINFILE \
        $PROBLEMFILE \
        --search "astar(modular_pdb(modular_rbp(time_limit=200),rand_walk(time_limit=10),900,pdb_factory=modular_symbolic,create_perimeter=false,only_gamer=true))"

## Define meta data
%labels
Name        ComplementaryPDB
Description  Modified version of complementary heuristic, where we are using completely new bin packing algorithms(paper pending), in situ learning of all the algorithm parameters critical to the pattern selection performance (previously only which pattern generation algorithm we use).  Also we have added a new pattern generator inspired on how Gamer chooses a single PDB which it keeps improving.  Also the selection algorithm is based on size of search space (previously selection criteria was time).  Some features from previous complementary heuristic as in the iJCAI 18 paper are yet to be adapted to this version, e.g. mutation for local search of succesful selection, stratified sampling. 
Authors Santiago Franco<santiago.franco@gmail.com>,Stefan Edelkamp<stefan.edelkamp@kcl.ac.uk>, Ionut Moraru <imoraru@kcl.ac.uk>
SupportsDerivedPredicates                       no
SupportsQuantifiedPreconditions                 no
SupportsQuantifiedEffects                       yes
SupportsUniversallyQuantifiedEffects            no
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 no
SupportsConditionalEffects                      yes
SupportsImplyPreconditions                      no